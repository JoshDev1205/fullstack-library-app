### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Author {
  books(after: String, before: String, first: Int, last: Int, skip: Int): [Book!]
  country: String!
  id: ID!
  name: String!
}

input AuthorCreateInput {
  books: BookCreateManyWithoutBooksInput
  country: String!
  id: ID
  name: String!
}

input AuthorCreateOneWithoutAuthorInput {
  connect: AuthorWhereUniqueInput
  create: AuthorCreateWithoutBooksInput
}

input AuthorCreateWithoutBooksInput {
  country: String!
  id: ID
  name: String!
}

input AuthorUpdateInput {
  books: BookUpdateManyWithoutAuthorInput
  country: String
  id: ID
  name: String
}

input AuthorUpdateOneRequiredWithoutBooksInput {
  connect: AuthorWhereUniqueInput
  create: AuthorCreateWithoutBooksInput
  update: AuthorUpdateWithoutBooksDataInput
  upsert: AuthorUpsertWithoutBooksInput
}

input AuthorUpdateWithoutBooksDataInput {
  country: String
  id: ID
  name: String
}

input AuthorUpsertWithoutBooksInput {
  create: AuthorCreateWithoutBooksInput!
  update: AuthorUpdateWithoutBooksDataInput!
}

input AuthorWhereUniqueInput {
  id: ID
}

type Book {
  author: Author!
  description: String!
  id: ID!
  price: Int!
  quantity: Int
  title: String!
}

input BookCreateInput {
  author: AuthorCreateOneWithoutAuthorInput!
  description: String!
  id: ID
  price: Int!
  quantity: Int
  title: String!
}

input BookCreateManyWithoutBooksInput {
  connect: [BookWhereUniqueInput!]
  create: [BookCreateWithoutAuthorInput!]
}

input BookCreateWithoutAuthorInput {
  description: String!
  id: ID
  price: Int!
  quantity: Int
  title: String!
}

input BookUpdateInput {
  author: AuthorUpdateOneRequiredWithoutBooksInput
  description: String
  id: ID
  price: Int
  quantity: Int
  title: String
}

input BookUpdateManyDataInput {
  description: String
  id: ID
  price: Int
  quantity: Int
  title: String
}

input BookUpdateManyWithoutAuthorInput {
  connect: [BookWhereUniqueInput!]
  create: [BookCreateWithoutAuthorInput!]
  delete: [BookWhereUniqueInput!]
  deleteMany: [MutationUpdateOneAuthorWhereInput!]
  disconnect: [BookWhereUniqueInput!]
  set: [BookWhereUniqueInput!]
  update: [BookUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [BookUpdateManyWithWhereNestedInput!]
  upsert: [BookUpsertWithWhereUniqueWithoutAuthorInput!]
}

input BookUpdateManyWithWhereNestedInput {
  data: BookUpdateManyDataInput!
  where: MutationUpdateOneAuthorWhereInput!
}

input BookUpdateWithoutAuthorDataInput {
  description: String
  id: ID
  price: Int
  quantity: Int
  title: String
}

input BookUpdateWithWhereUniqueWithoutAuthorInput {
  data: BookUpdateWithoutAuthorDataInput!
  where: BookWhereUniqueInput!
}

input BookUpsertWithWhereUniqueWithoutAuthorInput {
  create: BookCreateWithoutAuthorInput!
  update: BookUpdateWithoutAuthorDataInput!
  where: BookWhereUniqueInput!
}

input BookWhereUniqueInput {
  id: ID
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Mutation {
  createOneAuthor(data: AuthorCreateInput!): Author!
  createOneBook(data: BookCreateInput!): Book!
  deleteOneAuthor(where: AuthorWhereUniqueInput!): Author
  deleteOneBook(where: BookWhereUniqueInput!): Book
  updateOneAuthor(data: AuthorUpdateInput!, where: AuthorWhereUniqueInput!): Author
  updateOneBook(data: BookUpdateInput!, where: BookWhereUniqueInput!): Book
}

input MutationUpdateOneAuthorFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

input MutationUpdateOneAuthorWhereInput {
  AND: [MutationUpdateOneAuthorWhereInput!]
  description: StringFilter
  id: StringFilter
  NOT: [MutationUpdateOneAuthorWhereInput!]
  OR: [MutationUpdateOneAuthorWhereInput!]
  price: IntFilter
  quantity: MutationUpdateOneAuthorFilter
  title: StringFilter
}

type Query {
  findManyAuthor(after: String, before: String, first: Int, last: Int, skip: Int): [Author!]
  findManyBook(after: String, before: String, first: Int, last: Int, skip: Int): [Book!]
  findOneAuthor(where: AuthorWhereUniqueInput!): Author
  findOneBook(where: BookWhereUniqueInput!): Book
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}
